///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #8
Full Name  : Pei-Ti, Chen
Student ID#: 133237222

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////
1. 
For return value: 
Benefit: The return value is good for flexibility and easy to use. With the function to return a value, the coder can easily get the result without declaring another variable. This can make the code more simple, readible, flexible, and convenient.
Negative:It may increaed complexity, not safty, lack of meaning and difficult to extend.

For return via argument: 
Benefit:Can increase usability, flexibility and cacn multiple return valuesin code.
Negative: When a function designed to return a value modifies an argument many times, it can make some mistakes and make the code difficult to maintain. If we don't manage well, it will cause confusion and have bugs.

2.
Cohesion: In 14.calculateReportData, some functions, for example, convertLbs, calculateServings, calculateCostPerServing, and calculateCostPerCal, will have to calculate the answer. Highly cohesive leads to more maintainable, modular, and easier-to-understand code.
Coupling: In 10.convertLbs, use a high coupling because inside the function I still call the function to calculate for me. The convertLbsKg and convertLbsG functions depend on the return value of convertLbs.

3.
1)Encapsulating data:It refers to the bundling of data and methods of manipulating data.
Protect data integrity, prevent accidental modification, and provide better abstraction and security.
2)Simplify the parameter list:
Multiple related parameters can be combined into one object, thereby simplifying the parameter list and making function calls clearer and more concise.
3)Increased flexibility:By encapsulating data and simplifying parameter lists, the code becomes more flexible, changing only a few places, rather than all over the entire code base.
4)Avoided modifying multiple parameters:By encapsulating data, you only need to modify it where it is encapsulated.
5)Improved code maintainability:Improve code maintainability and reduce maintenance cost. Instead of using a member inside the struct, using the whole struct will be easier, shorter, and quicker.