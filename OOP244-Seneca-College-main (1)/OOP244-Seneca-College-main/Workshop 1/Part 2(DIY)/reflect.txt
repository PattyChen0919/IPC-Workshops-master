//==============================================
// Name           : Kabir Narula
// Email          : Knarula9@myseneca.ca
// Student ID     : 127962223
// Section        : NAA
// Date           : 05/17/2023(Wednesday)
//==============================================

Question1- If we put the main function in the sdds namespace in C++, it would result in a compilation error because the main function is a special function that serves as the entry point of the program and 
must always be defined in the global namespace.The C++ standard requires that the main function be defined with global scope.
IF attempt to define the main function within the sdds namespace, like this:

namespace sdds {
    void main() {
        // Code here
    }
}
we will run into a compilation error when you attempt to compile your code. "Undefined reference to main'" will likely be the error message.
This error shows that main' is not declared in the global namespace, which prevents the linker from finding the program's entry point.



Question2)- There are various advantages to dividing code into multiple modules as opposed to a single file. 
By enabling you to separate your codebase into logical parts, each module focusing on a particular functionality or a group of related functions, classes, or data structures, it first encourages modularity and organisation.
This modular approach improves the scalability, readability, and maintainability of the code.Third, breaking up code into modules speeds up compilation because just the affected module needs to be rebuilt whena change is made, rather than the entire project.
Additionally, modular code facilitates collaboration and parallel development in multi-developer projects, increasing productivity and integrating contributions.
Also, by separating particular modules, it makes testing and debugging easier by allowing concentrated testing of discrete components or functionalities. Last but not least, writing code in many modules frequently results in the discovery of reusable components. These components can then be extracted into libraries or shared modules, promoting code reuse across various projects or teams. 
In general, having many modules as opposed to a single file optimisessoftware engineering procedures, increases code maintainability, and fosters productive development and teamwork.