//==============================================
// Name           : Kabir Narula
// Email          : Knarula9@myseneca.ca
// Student ID     : 127962223
// Section        : NAA
// Date           : 15/06/2023(Thursday)
//==============================================

Question1) Because it directly updates the object and returns a reference to the updated object, the prefix increment operator (++x) is able to return by reference. 
It is safe to return a reference because the update finished before the return statement. The postfix increment operator (x++), on the other hand, 
must return an exact copy of the original object prior to performing the increment operation. It can only return by value as a result.

CODE EXAMPLE//

#include <iostream>

class CollegeClass {
private:
    int numStudents;

public:
    CollegeClass(int students = 0) : numStudents(students) {}

    // Prefix increment operator
    CollegeClass& operator++() {
        ++numStudents;
        return *this;
    }

    // Postfix increment operator
    CollegeClass operator++(int) {
        CollegeClass temp = *this;
        ++numStudents;
        return temp;
    }

    int getNumStudents() const {
        return numStudents;
    }
};

int main() {
    CollegeClass classA(20);

    std::cout << "Number of students in class A: " << classA.getNumStudents() << std::endl;

    CollegeClass classB = ++classA;  // Prefix increment operator
    std::cout << "Number of students in class A after prefix increment: " << classA.getNumStudents() << std::endl;
    std::cout << "Number of students in class B: " << classB.getNumStudents() << std::endl;

    CollegeClass classC = classA++;  // Postfix increment operator
    std::cout << "Number of students in class A after postfix increment: " << classA.getNumStudents() << std::endl;
    std::cout << "Number of students in class C: " << classC.getNumStudents() << std::endl;

    return 0;
}



OUtpUT//  Number of students in class A: 20
Number of students in class A after prefix increment: 21
Number of students in class B: 21
Number of students in class A after postfix increment: 22
Number of students in class C: 21


Question2) Because it alters the left-hand operand in-place and returns a reference to the updated object, the += operator can return by reference. This enables the chaining of several += actions. The + operator,
on the other hand, performs a binary operation and returns a new object as a result.Returning by reference would be unsafe since the returned object would be a temporary,
and returning a reference to a temporary object would lead to undefined behavior.

Question3) In the  code, the conversion operators (operator int, operator char, operator double) are explicitly defined as member functions. 
it makes sure that the conversion only happens when the user specifically requests it.

qUESTION4) The helper operators in the workshop cannot be implemented as members because they involve operations between two different types. 
Member functions can only be defined for a single class and cannot directly operate on or modify objects of different types.
whereas hesese operators can be overloaded and the desired behaviour involving many types is made possible by their definition as non-member functions.

IN code, the helper operators operator+=(int& val, const Mark& theMark) are implemented as non-member functions. 
 This is because they involve the addition operation between an integer (int) and an object of type Mark.